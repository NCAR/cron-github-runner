#!/bin/bash
#
#   cron-hpc-runner
#
#   Author:         Brian Vanderwende
#   Last Revised:   16:42, 11 Dec 2024
#

function usage {
cat << EOF
Usage: $0 --name NAME --machine MACHINE RUNNERDIR
       $0 --info                        RUNNERDIR|NAME
       $0 --resume                      RUNNERDIR|NAME
       $0 --stop                        RUNNERDIR|NAME
       $0 --list

This script has three usage modes:

It can be used within a cron job to either start or keep alive a self-hosted HPC
runner on Derecho or Casper. Before you run this script, you will need to install
the GitHub Actions self-hosted runner application for Linux and the run the
"config.sh" script to set up the runner.

Once the runner is configured, add a cron job on cron.hpc.ucar.edu that calls
this script, providing the desired machine and the path to the configured runner.
This script will start the runner if it is not already started. If it is already
running, it will do nothing.

Example cron:

# Check that the runner is active every 5 minutes
*/5 * * * * $my_root/bin/cron-github-runner -n myrunner -m derecho /glade/work/$USER/runners/hpc-runner

Alternatively, the script can be called on the command line to either stop or
resume runner activity. If --stop is used, the runner will be killed if active
and the cron job will not try to restart it. If --resume is used, this hold on
the cron job will be released and it will try to restart the runner.

Options:
    -h, --help              print this help message
    -i, --info              print information about the runner at RUNNERDIR
    -l, --list              print list of runners started with this utility
    -m, --machine MACHINE   cron mode; specify derecho or casper for the machine
    -n, --name NAME         when starting a runner: assign it the given name
    -r, --resume            release hold on cron job and restart runner
    -s, --stop              kill runner if active and impose hold on cron job

EOF
}

function create_error_file {
cat > $2 << EOF
cron-github-runner failed!

Machine: ${runner_machine:-unknown}
Path:    ${runner_path:-unknown}

Error message:
$1
EOF
}

function error_tracker_message {
cat << EOF

An error tracking file was created at ${runner_path:-$HOME}/cron-github-runner.error
This script will not attempt to start the runner again until the error has been
remediated and that tracking file has been removed.
EOF
}

function log_message {
    msg_time="$(date -Iseconds) - "

    if [[ $1 == Error* ]]; then
        if [[ $tty_mode == true ]]; then
            echo -e "$1"
        elif [[ ! -f ${runner_path:-$HOME}/cron-github-runner.error ]]; then
            echo -e "${msg_time}$1" >> $cron_log
            create_error_file "${msg_time}$1" ${runner_path:-$HOME}/cron-github-runner.error
            error_tracker_message >> $cron_log
        fi

        exit 1
    elif [[ $tty_mode == true ]]; then
        echo -e "$1"
    else
        echo -e "${msg_time}$1" >> ${cron_log:-/dev/stdin}
    fi
}

function print_runner_info {
cat << EOF
Runner Information
------------------
Runner name:    $runner_name
Runner path:    $runner_path
Logging path:   $log_path
Status:         ${runner_status:-configured}
EOF

if [[ $runner_status == started ]]; then
cron_latest=$(ls -1 $log_path/${runner_name}_cron_*.log | tail -1)
runner_latest=$(ls -1 $log_path/${runner_name}_runner_*.log | tail -1)

cat << EOF
Host:           $runner_host
Parent PID:     $runner_pid

Cron log:       $cron_latest
 >> latest: $(tail -1 $cron_latest)

Runner log:     $runner_latest
 >> latest: $(tail -1 $runner_latest)

Note -  do not manually attempt to kill the parent PID. This will not properly
        shut down the runner. Instead call this script with the --stop option.
EOF
fi
}

function print_runner_list {
    list_fmt="%-15s %-10s %-10s %s\n"
    printf "$list_fmt" Name Status PID Directory
    echo "---------------------------------------------------------------------"

    if [[ -f $log_path/list ]]; then
        while read runner_name runner_path; do
            runner_status=$(cat $runner_path/cron-runner.status 2> /dev/null)
            runner_pid=$(cat $runner_path/cron-runner.pid 2> /dev/null)
            printf "$list_fmt" $runner_name ${runner_status:-unknown} "${runner_pid}" $runner_path
        done < $log_path/list
    fi
}

function add_runner_to_list {
    if ! grep -q "^$runner_name " $log_path/list 2> /dev/null; then
        echo "$runner_name $runner_path" >> $log_path/list
    else
        old_path=$(awk -v rn=$runner_name '$1 == rn { print $2 }' $log_path/list)

        if [[ $old_path != $runner_path ]]; then
            sed -i "/^$runner_name /d" $log_path/list
            echo "$runner_name $runner_path" >> $log_path/list
        fi
    fi
}

my_user=$(whoami)
my_root="$( cd "$(dirname "$0")"/.. ; pwd )"
log_path=/glade/derecho/scratch/$my_user/.github_runner_logs
mode=cron

# Handle command-line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            usage
            exit
            ;;
        -l|--list)
            mode=list
            ;;
        -i|--info)
            mode=info
            ;;
        -m|--machine)
            if [[ $1 == *=* ]]; then
                runner_machine=${1#*=}
            else
                runner_machine=$2
                shift
            fi
            ;;
        -n|--name)
            if [[ $1 == *=* ]]; then
                runner_name=${1#*=}
            else
                runner_name=$2
                shift
            fi

            if [[ -z $runner_path ]]; then
                runner_path=$(awk -v rn=$runner_name '$1 == rn { print $2 }' $log_path/list 2> /dev/null)
            fi
            ;;
        -r|--resume)
            mode=resume
            ;;
        -s|--stop)
            mode=stop
            ;;
        /*)
            runner_path=$1

            if [[ -z $runner_name ]]; then
                runner_name=$(awk -v rp=$1 '$2 == rp { print $1 }' $log_path/list 2> /dev/null)
            fi
            ;;
        *)
            >& echo "Error: Input path is not valid ($1)"
            exit 1
            ;;
    esac

    shift
done

if [[ $(hostname -s) != cron ]]; then
    >&2 echo "Error: This script can only be executed from cron.hpc.ucar.edu"
    exit 1
fi

if tty -s; then
    tty_mode=true

    # Cron mode not allowed unless we are debugging
    if [[ $mode == cron ]] && [[ -z $CRON_RUNNER_DEBUG ]]; then
        >&2 echo "Error: Runner launching mode is only allowed when used with cron"
        exit 1
    fi
else
    # Info modes does not make sense to run in cron
    if [[ $mode =~ (info|list) ]]; then
        exit 1
    fi

    # If used in cron, log to a file instead of stdout
    log_date=$(date +%Y%m%d)
    mkdir -p $log_path
    cron_log=$log_path/${runner_name:-unknown}_cron_${log_date}.log
fi

if [[ $mode == list ]]; then
    print_runner_list
    exit
fi

if [[ -z $runner_path ]]; then
    log_message "Error: Runner path not provided or found in registry"
fi

if [[ ! -d $runner_path ]]; then
    unset runner_path
    log_message "Error: Input runner path does not exist"
fi

# If using cron mode, check that machine is valid
if [[ $mode == cron ]]; then
    case ${runner_machine:=none} in
        derecho)
            dest_domain=derecho.hpc.ucar.edu
            ;;
        casper)
            dest_domain=casper.hpc.ucar.edu
            ;;
        *)
            log_message "Error: Invalid machine specified ($runner_machine)"
            ;;
    esac
fi

if [[ ! -f $runner_path/run-helper.sh ]]; then
    log_message "Error: Github Actions runner scripts not found at $runner_path"
fi

if [[ -z $runner_name ]]; then
    log_message "Error: Runner name not provided or found in registry"
fi

# Get runner status, if exists
if [[ -f $runner_path/cron-runner.status ]]; then
    runner_status=$(cat $runner_path/cron-runner.status)
fi

# If the runner has been stopped, don't bother going further
if [[ $runner_status == stopped ]]; then
    if [[ $mode == resume ]]; then
        echo "resuming" > $runner_path/cron-runner.status
        log_message "Removing hold on runner at $runner_path ..."
    elif [[ $tty_mode == true ]]; then
        >&2 echo -e "Note: Runner has been halted. Use --resume to remove hold.\n"
    fi

    if [[ $mode != info ]]; then
        exit
    fi
elif [[ $mode == resume ]]; then
    echo "No hold detected on specified runner. Doing nothing."
    exit
fi

# Now, let's make sure the runner is configured
if [[ ! -f $runner_path/.runner ]]; then
    log_message "Error: Runner configuration not found. Run config.sh first to setup runner."
fi

# Has a runner been started already?
if [[ -f $runner_path/cron-runner.pid ]]; then
    runner_pid=$(cat $runner_path/cron-runner.pid)
    runner_host=$(cat $runner_path/cron-runner.host)

    # Without accept-new, this script can encounter a silent key-prompt block
    ssh -q -o "StrictHostKeyChecking accept-new" $runner_host "pgrep -u $my_user -x run.sh |& grep -q $runner_pid"
    runner_alive=$?

    if [[ $mode != info ]]; then
        add_runner_to_list

        if [[ $runner_alive -eq 0 ]]; then
            if [[ $mode == stop ]]; then
                log_message "Killing active runner with pid=$runner_pid on host=$runner_host ..."
                ssh -q -o "StrictHostKeyChecking accept-new" $runner_host "$my_root/etc/stop-remote-runner $runner_pid"
                my_status=$?

                if [[ $my_status != 0 ]]; then
                    log_message "Error: Could not shut down runner"
                else
                    echo "stopped" > $runner_path/cron-runner.status
                    rm -f $runner_path/cron-runner.pid $runner_path/cron-runner.host
                fi

                exit $my_status
            fi

            log_message "Runner with pid=$runner_pid on host=$runner_host has status=active"
            exit
        else
            log_message "Runner with pid=$runner_pid on host=$runner_host has status=BROKEN"
            log_message "Restarting runner ..."
            rm -f $runner_path/cron-runner.pid $runner_path/cron-runner.host
        fi
    fi
fi

# Either start or restart a runner
if [[ $mode == info ]]; then
    print_runner_info
else
    add_runner_to_list

    # Create convenient symlink to runner directory
    rm -f $log_path/$runner_name
    ln -s $runner_path $log_path/$runner_name

    if [[ $tty_mode == true ]]; then
        ssh -q -o "StrictHostKeyChecking accept-new" $dest_domain "$my_root/etc/start-remote-runner $runner_path tty"
    else
        ssh -q -o "StrictHostKeyChecking accept-new" $dest_domain "$my_root/etc/start-remote-runner $runner_path $cron_log"
    fi
fi
